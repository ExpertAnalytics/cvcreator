#!/usr/bin/env python
# encoding: utf-8
# PYTHON_ARGCOMPLETE_OK

import argparse
from glob import glob
import cvcreator as cv


parser = argparse.ArgumentParser(
    description="A template based CV creater using YAML templates.")

group = parser.add_mutually_exclusive_group(required=True)
group.add_argument(
    "filename", type=str, nargs="?",
    help="YAML source file.").completer = lambda prefix, **kws: glob("*.yaml")
group.add_argument(
    "-y", "--yaml", action="store_true",
    help="Create simple YAML example.")

parser.add_argument(
    "-t", "--template", type=str, dest="template",
    help="Select which template to use.").completer = lambda prefix, **kws: cv.get_template_names()
parser.add_argument(
    "-o", "--output", type=str, dest="output",
    help="Name of the output file.").completer = lambda prefix, **kws: glob("*.pdf")
parser.add_argument(
    "-l", '--latex', action="store_true",
    help="Create latex file instead of pdf.")
parser.add_argument(
    "-s", '--silent', action="store_true",
    help="Muffle output.")
parser.add_argument(
    "a", metavar="a", type=int, nargs="*",
    help="Projects to include. Omit/0 for all/none.")

parser.add_argument(
    "-lw", "--logo-width", type=str, dest="logo_width",
    help="Set the logo width.")
parser.add_argument(
    "-lt", "--logo-top", type=str, dest="logo_top",
    help="Set the logo top position.")
parser.add_argument(
    "-ll", "--logo-left", type=str, dest="logo_left",
    help="Set the logo left position.")
parser.add_argument(
    "-lm", "--logo-margin", type=str, dest="logo_margin",
    help="Set the margin after logo.")

try:
    import argcomplete
    argcomplete.autocomplete(parser)
except:
    pass

if __name__ == "__main__":

    args = parser.parse_args()
    cv.main(args)
